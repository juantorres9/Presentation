
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003b  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000021e  00000000  00000000  000001e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ef  00000000  00000000  000003ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020c  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c0  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <interruptSet>:
#include <avr/interrupt.h>
#include <util/delay.h>


void interruptSet(){
cli();//reset global Interrupt
  6c:	f8 94       	cli
sei();//set global interrupt bit
  6e:	78 94       	sei
MCUCR|=(1<<ISC11)|(1<<ISC10); //Activation  au Front Ascendant de entrée INT1
  70:	85 b7       	in	r24, 0x35	; 53
  72:	8c 60       	ori	r24, 0x0C	; 12
  74:	85 bf       	out	0x35, r24	; 53
GICR|=(1<<INT1); //Activation Specifique  Interrupt 
  76:	8b b7       	in	r24, 0x3b	; 59
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	8b bf       	out	0x3b, r24	; 59
}
  7c:	08 95       	ret

0000007e <main>:

int main(void)
  {  
  //INTERRUPT Config
  DDRC&=~(1<<PIND3);//Activation PIN INT1 en sortie
  7e:	a3 98       	cbi	0x14, 3	; 20
  interruptSet();//Initialisation de FLAGS  INT1
  80:	0e 94 36 00 	call	0x6c	; 0x6c <interruptSet>
  //TIMMER config
  DDRA|=0xF0;//4 leds 1=OUTPUT
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	80 6f       	ori	r24, 0xF0	; 240
  88:	8a bb       	out	0x1a, r24	; 26
  TCCR1B|=(1<<CS12);//Prescalar 256
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	84 60       	ori	r24, 0x04	; 4
  8e:	8e bd       	out	0x2e, r24	; 46
    {
    PORTA=PORTA  ;
    } 
    else
    {
     PORTA^=(1<<PINA4);//Clignoter led du  PINA7
  90:	20 e1       	ldi	r18, 0x10	; 16
  DDRA|=0xF0;//4 leds 1=OUTPUT
  TCCR1B|=(1<<CS12);//Prescalar 256
 //TCCR1B=0X04;
  
  while(1){ 
    if(TCNT1<1953)//Activation LED chaque .5 seconds 3906 Cycles=1second 
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	9d b5       	in	r25, 0x2d	; 45
  96:	81 5a       	subi	r24, 0xA1	; 161
  98:	97 40       	sbci	r25, 0x07	; 7
  9a:	18 f4       	brcc	.+6      	; 0xa2 <main+0x24>
    {
    PORTA=PORTA  ;
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	f8 cf       	rjmp	.-16     	; 0x92 <main+0x14>
    } 
    else
    {
     PORTA^=(1<<PINA4);//Clignoter led du  PINA7
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	82 27       	eor	r24, r18
  a6:	8b bb       	out	0x1b, r24	; 27
     TCNT1=0;//Reset REGISTRE de comptage Timer 1 TCNT1
  a8:	1d bc       	out	0x2d, r1	; 45
  aa:	1c bc       	out	0x2c, r1	; 44
  ac:	f2 cf       	rjmp	.-28     	; 0x92 <main+0x14>

000000ae <__vector_2>:




ISR(INT1_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
PORTA|=(1<<PINA7);//Mettre ON les leds PORTA
  c4:	df 9a       	sbi	0x1b, 7	; 27
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	28 ec       	ldi	r18, 0xC8	; 200
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <__vector_2+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <__vector_2+0x20>
_delay_ms(100);//delai de 5 seconds 
PORTA|=(1<<PINA6);
  d8:	de 9a       	sbi	0x1b, 6	; 27
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	28 ec       	ldi	r18, 0xC8	; 200
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__vector_2+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__vector_2+0x34>
_delay_ms(100);//delai de 5 seconds
PORTA|=(1<<PINA5);
  ec:	dd 9a       	sbi	0x1b, 5	; 27
  ee:	88 ee       	ldi	r24, 0xE8	; 232
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	28 ec       	ldi	r18, 0xC8	; 200
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__vector_2+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <__vector_2+0x48>
_delay_ms(100);//delai de 5 seconds
PORTA&=0X1F;
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	8f 71       	andi	r24, 0x1F	; 31
 104:	8b bb       	out	0x1b, r24	; 27
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	28 ec       	ldi	r18, 0xC8	; 200
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <__vector_2+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <__vector_2+0x60>
_delay_ms(100);

//PORTA &=~(1<<PINA7)&~(1<<PINA6)&~(1<<PINA5);//Mettre OFF 
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015a  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fc  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000171  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ce  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 37 00 	call	0x6e	; 0x6e <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_us>:
int k;
  for(k=0;k<a;k++)
  {
  //    __asm("nop");;    
  }
}
  6c:	08 95       	ret

0000006e <main>:

int main(void)
  //
  {
  sei();
  6e:	78 94       	sei
  DDRA |=(1<<PINA7)|(1<<PINA6)|(1<<PINA5)|(1<<PINA4);
  70:	8a b3       	in	r24, 0x1a	; 26
  72:	80 6f       	ori	r24, 0xF0	; 240
  74:	8a bb       	out	0x1a, r24	; 26
  TCCR1B|=(1<<CS11)|(1<<CS10)|(1<<WGM12);
  76:	8e b5       	in	r24, 0x2e	; 46
  78:	8b 60       	ori	r24, 0x0B	; 11
  7a:	8e bd       	out	0x2e, r24	; 46
   TIMSK|=(1<<OCIE1A);
  7c:	89 b7       	in	r24, 0x39	; 57
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	89 bf       	out	0x39, r24	; 57
   OCR1A=15624;
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	9d e3       	ldi	r25, 0x3D	; 61
  86:	9b bd       	out	0x2b, r25	; 43
  88:	8a bd       	out	0x2a, r24	; 42
  
  while(1)  { 
    PORTA^=(1<<PINA4);
  8a:	40 e1       	ldi	r20, 0x10	; 16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	28 ec       	ldi	r18, 0xC8	; 200
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	84 27       	eor	r24, r20
  94:	8b bb       	out	0x1b, r24	; 27
  96:	88 e8       	ldi	r24, 0x88	; 136
  98:	93 e1       	ldi	r25, 0x13	; 19
  9a:	f9 01       	movw	r30, r18
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <main+0x2c>
  a4:	f5 cf       	rjmp	.-22     	; 0x90 <main+0x22>

000000a6 <__vector_7>:

  }


ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
PORTA^=(1<<PINA7)^(1<<PINA6)^(1<<PINA5);
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	90 ee       	ldi	r25, 0xE0	; 224
  b8:	89 27       	eor	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27

}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

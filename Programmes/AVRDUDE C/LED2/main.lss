
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000117  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000078  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000072  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

 int main(void)
  //
  {

DDRA=0xF0;                        //DDRA=1111 0000--1=OUTPUT  0=INPUT
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
PORTA=(1<<PORTA0)|(1<<PORTA1) ; //PORTA=0000 0011--0=NO PULLUP   1=PULLUP(EN ENTREE UNIQUEMENT)
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	8b bb       	out	0x1b, r24	; 27

  while(1)
  {
    
	
	  if ((PINA&0X03)==0X03)
  74:	89 b3       	in	r24, 0x19	; 25
  76:	83 70       	andi	r24, 0x03	; 3
  78:	83 30       	cpi	r24, 0x03	; 3
  7a:	11 f4       	brne	.+4      	; 0x80 <main+0x14>
	  {
	    PORTA |=(1<<PINA7); // PORTA= 1000 0011
  7c:	df 9a       	sbi	0x1b, 7	; 27
  7e:	fa cf       	rjmp	.-12     	; 0x74 <main+0x8>
	  } 
	  else
	  {
	    PORTA &=~(1<<PINA7);// PORTA= 0000 0011
  80:	df 98       	cbi	0x1b, 7	; 27
  82:	f8 cf       	rjmp	.-16     	; 0x74 <main+0x8>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

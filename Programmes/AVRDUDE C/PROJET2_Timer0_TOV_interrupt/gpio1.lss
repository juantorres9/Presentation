
gpio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000040  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b4  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000083  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bb  00000000  00000000  000002a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a8  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <t0_overflow_init>:
void t0_overflow_init(void);

//**********************OVERFLOW TIMER 0 INTERRUPT*************************/
void t0_overflow_init(void){
	//TCCR0:control registre  0000 0101=0x05
	TCCR0|=(1<<CS02)|(1<<CS00);//Prescalaire 1MHZ/1024
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	85 60       	ori	r24, 0x05	; 5
  70:	83 bf       	out	0x33, r24	; 51
	//TIMSK:Activation Overflow interrupt timer 0
	TIMSK|=(1<<TOIE0);//Overflow Interrupt timer0 enable!
  72:	89 b7       	in	r24, 0x39	; 57
  74:	81 60       	ori	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
}
  78:	08 95       	ret

0000007a <__vector_11>:

//Overflow timer0 routine d'interruption
ISR(TIMER0_OVF_vect){
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
	PORTB^=0X01;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
	PORTA^=0X01;
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	89 27       	eor	r24, r25
  94:	8b bb       	out	0x1b, r24	; 27
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:

//*****************************MAIN PROGRAM*****************************/
int main(void)
{
	//DDRB=output
	DDRB=0x01;// 0000 0001
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	87 bb       	out	0x17, r24	; 23
	//DDRA=output
	DDRA=0x01;// 0000 0001
  a8:	8a bb       	out	0x1a, r24	; 26
	//Global interrupt
	sei();//global interrupt enable;
  aa:	78 94       	sei
void t0_overflow_init(void);

//**********************OVERFLOW TIMER 0 INTERRUPT*************************/
void t0_overflow_init(void){
	//TCCR0:control registre  0000 0101=0x05
	TCCR0|=(1<<CS02)|(1<<CS00);//Prescalaire 1MHZ/1024
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	85 60       	ori	r24, 0x05	; 5
  b0:	83 bf       	out	0x33, r24	; 51
	//TIMSK:Activation Overflow interrupt timer 0
	TIMSK|=(1<<TOIE0);//Overflow Interrupt timer0 enable!
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	89 bf       	out	0x39, r24	; 57
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x14>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>

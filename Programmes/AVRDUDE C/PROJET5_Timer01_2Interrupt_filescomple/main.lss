
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000094  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000280  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000019a  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000027c  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000135  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <t0_overflow_init>:
void t0_overflow_init(void);

//**********************OVERFLOW TIMER 0 INTERRUPT*************************/
void t0_overflow_init(void){
	//TCCR0:control registre  0000 0101=0x05
	TCCR0|=(1<<CS02)|(1<<CS00);//Prescalaire 1MHZ/1024
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	85 60       	ori	r24, 0x05	; 5
  70:	83 bf       	out	0x33, r24	; 51
	//TIMSK:Activation Overflow interrupt timer 0
	TIMSK|=(1<<TOIE0);//Overflow Interrupt timer0 enable!
  72:	89 b7       	in	r24, 0x39	; 57
  74:	81 60       	ori	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
}
  78:	08 95       	ret

0000007a <__vector_11>:

//Overflow timer0 routine d'interruption
ISR(TIMER0_OVF_vect){
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
	PORTB^=0X01;
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
}
  90:	9f 91       	pop	r25
  92:	8f 91       	pop	r24
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <t1_compareA_init>:
//**********************OUTPUT COMPARE A TIMER1 INTERRUPT*************************/
void t1_compareA_init(void){
	//TTCR1A et TCCR1B: resgistre de control timer 1
	TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC Mode et prescalaire de 64
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	8b 60       	ori	r24, 0x0B	; 11
  a2:	8e bd       	out	0x2e, r24	; 46
	//TIMSK:Registre Masque d'interruption des Timers
	TIMSK|=(1<<OCIE1A);//Permet d'activer l'interruption OUTPUT COMPARE A
  a4:	89 b7       	in	r24, 0x39	; 57
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	89 bf       	out	0x39, r24	; 57
	//OCR1A:Registre pour garder la valeur à comparer
	OCR1A=15625; //1 second
  aa:	89 e0       	ldi	r24, 0x09	; 9
  ac:	9d e3       	ldi	r25, 0x3D	; 61
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42
}
  b2:	08 95       	ret

000000b4 <__vector_7>:
//Output compare A Timer1 Routine d'interruption
ISR(TIMER1_COMPA_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	PORTB^=0x02;
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	89 27       	eor	r24, r25
  c8:	88 bb       	out	0x18, r24	; 24
	}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:

//*****************************MAIN PROGRAM*****************************/
int main(void)
{
	//DDRB=output
	DDRB=0x03;// 0000 0011
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	87 bb       	out	0x17, r24	; 23
	//DDRA=output
	DDRA=0x0F;// 0000 1111
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	8a bb       	out	0x1a, r24	; 26
	//Global interrupt
	sei();//global interrupt enable;
  e0:	78 94       	sei
void t0_overflow_init(void);

//**********************OVERFLOW TIMER 0 INTERRUPT*************************/
void t0_overflow_init(void){
	//TCCR0:control registre  0000 0101=0x05
	TCCR0|=(1<<CS02)|(1<<CS00);//Prescalaire 1MHZ/1024
  e2:	83 b7       	in	r24, 0x33	; 51
  e4:	85 60       	ori	r24, 0x05	; 5
  e6:	83 bf       	out	0x33, r24	; 51
	//TIMSK:Activation Overflow interrupt timer 0
	TIMSK|=(1<<TOIE0);//Overflow Interrupt timer0 enable!
  e8:	89 b7       	in	r24, 0x39	; 57
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	89 bf       	out	0x39, r24	; 57
	PORTB^=0X01;
}
//**********************OUTPUT COMPARE A TIMER1 INTERRUPT*************************/
void t1_compareA_init(void){
	//TTCR1A et TCCR1B: resgistre de control timer 1
	TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);//CTC Mode et prescalaire de 64
  ee:	8e b5       	in	r24, 0x2e	; 46
  f0:	8b 60       	ori	r24, 0x0B	; 11
  f2:	8e bd       	out	0x2e, r24	; 46
	//TIMSK:Registre Masque d'interruption des Timers
	TIMSK|=(1<<OCIE1A);//Permet d'activer l'interruption OUTPUT COMPARE A
  f4:	89 b7       	in	r24, 0x39	; 57
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	89 bf       	out	0x39, r24	; 57
	//OCR1A:Registre pour garder la valeur à comparer
	OCR1A=15625; //1 second
  fa:	89 e0       	ldi	r24, 0x09	; 9
  fc:	9d e3       	ldi	r25, 0x3D	; 61
  fe:	9b bd       	out	0x2b, r25	; 43
 100:	8a bd       	out	0x2a, r24	; 42
	//config  Overflow Timer0 interrupt
	t0_overflow_init();
	//config  Output compare A Timer1 interrupt
	t1_compareA_init();
	while(1){	
		comptage(7);
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 91 00 	call	0x122	; 0x122 <comptage>
		comptage(15);
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 91 00 	call	0x122	; 0x122 <comptage>
 112:	f7 cf       	rjmp	.-18     	; 0x102 <main+0x2a>

00000114 <affichePortA>:

#include "fonc1.h"

//definition de fonction1 
void affichePortA(int nombre){
	if(nombre>0x0F){
 114:	80 31       	cpi	r24, 0x10	; 16
 116:	91 05       	cpc	r25, r1
 118:	14 f0       	brlt	.+4      	; 0x11e <affichePortA+0xa>
		PORTA=0x00;
 11a:	1b ba       	out	0x1b, r1	; 27
 11c:	08 95       	ret
	}else{
		PORTA=nombre;//implicit char conversion
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	08 95       	ret

00000122 <comptage>:
	}
}
//definition de fonction2
void comptage(int nombre){
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	69 e1       	ldi	r22, 0x19	; 25
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	10 c0       	rjmp	.+32     	; 0x14c <comptage+0x2a>

#include "fonc1.h"

//definition de fonction1 
void affichePortA(int nombre){
	if(nombre>0x0F){
 12c:	40 31       	cpi	r20, 0x10	; 16
 12e:	51 05       	cpc	r21, r1
 130:	14 f0       	brlt	.+4      	; 0x136 <comptage+0x14>
		PORTA=0x00;
 132:	1b ba       	out	0x1b, r1	; 27
 134:	01 c0       	rjmp	.+2      	; 0x138 <comptage+0x16>
	}else{
		PORTA=nombre;//implicit char conversion
 136:	4b bb       	out	0x1b, r20	; 27
 138:	20 e2       	ldi	r18, 0x20	; 32
 13a:	3e e4       	ldi	r19, 0x4E	; 78
 13c:	fb 01       	movw	r30, r22
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <comptage+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d1 f7       	brne	.-12     	; 0x13c <comptage+0x1a>
	}
}
//definition de fonction2
void comptage(int nombre){
	for(int i=0;i<=nombre;i++){
 148:	4f 5f       	subi	r20, 0xFF	; 255
 14a:	5f 4f       	sbci	r21, 0xFF	; 255
 14c:	84 17       	cp	r24, r20
 14e:	95 07       	cpc	r25, r21
 150:	6c f7       	brge	.-38     	; 0x12c <comptage+0xa>
		affichePortA(i);
		_delay_ms(2000);
		}
}
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>

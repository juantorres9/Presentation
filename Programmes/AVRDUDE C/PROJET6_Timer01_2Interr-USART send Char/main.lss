
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000057  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000172  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c5  00000000  00000000  0000040b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000013  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

//*****************************MAIN PROGRAM*****************************/
int main(void)
{
	//DDRC=  1=output  0=input
	SFIOR=(1<<PUD);
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	80 bf       	out	0x30, r24	; 48

	DDRC=0x01;// 0000 0001
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	84 bb       	out	0x14, r24	; 20
	PORTC=0x01;//0000 0001 pull-up on PINC0
  74:	85 bb       	out	0x15, r24	; 21
	//DDRC=0x03;// 0000 0011
	

	while(1){	
		initUsart();
  76:	0e 94 48 00 	call	0x90	; 0x90 <initUsart>
		
		ecrireByte(0x02);//ecrire etat bit PINC1
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	0e 94 53 00 	call	0xa6	; 0xa6 <ecrireByte>
		
		//_delay_ms(1000);
		uint8_t data=readByte();
  80:	0e 94 57 00 	call	0xae	; 0xae <readByte>
		if(data==0b00000010){
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x20>
			PORTC&=~(1<<PINC0);// OFF
  88:	a8 98       	cbi	0x15, 0	; 21
  8a:	f5 cf       	rjmp	.-22     	; 0x76 <main+0xa>
	
		}else{
			PORTC|=(1<<PINC0); //ON
  8c:	a8 9a       	sbi	0x15, 0	; 21
  8e:	f3 cf       	rjmp	.-26     	; 0x76 <main+0xa>

00000090 <initUsart>:
void initUsart(void){
	unsigned char baud=12;//4800bps
	/**USART UBRRH-UBRRL  Baud rate register**/ 
	//URSEL=0 Enable UBRR
	//UBRRL=BAUD bps
	UBRRH&=~(1<<8);
  90:	80 b5       	in	r24, 0x20	; 32
  92:	80 bd       	out	0x20, r24	; 32
	UBRRL=baud;
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	89 b9       	out	0x09, r24	; 9
	/**USART UCSRC  Control Status C**/ 
	//URSEL=1 Enable UCSRC
	//UMSEL=1 Asyncronous
	//UCSZ1|UCSZO=11  8Bits tramitter
	UCSRC|=(1<<URSEL)|(1<<UMSEL)|(3<<UCSZ0); //UMSEL Asynchronous 
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 6c       	ori	r24, 0xC6	; 198
  9c:	80 bd       	out	0x20, r24	; 32
	/**USART UCSRB Control Status B**/
	//RXEN=1 Receiver Pin enable
	//TXEN=1 Transmiter pin enable
	UCSRB|=(1<<RXEN)|(1<<TXEN);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
 	
}
  a4:	08 95       	ret

000000a6 <ecrireByte>:
//Ecrire 8Bytes  vers l'interface
void ecrireByte(uint8_t data){
	/**USART UCSRA Control Status A**/
	//UDRE=1  buffer de TX UDR est vide et pret a ecrire
	while(!(UCSRA & (1<<UDRE)) ){
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <ecrireByte>
	//WAIT   While(0?00 0000)  UDRE=0
	}
	//UDR=data  chargé le buffer de TX et envoyer  
	UDR=data;
  aa:	8c b9       	out	0x0c, r24	; 12
}
  ac:	08 95       	ret

000000ae <readByte>:
//Lire 8bytes provenant  de  l'interface USART
uint8_t readByte(void){
	/**USART UCSRA Control Status A**/
	unsigned char data;
	//RXC=1  buffer de RX UDR est chargée  et pret a ETRE lu
	while(!(UCSRA & (1<<RXC))){
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <readByte>
	//WAIT   While(?000 0000)  UDRE=0
	}
	//data =UDR lire le buffer UDR et clear la valeur RXC=0
	data=UDR;
  b2:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
  b4:	08 95       	ret

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b9  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000083  00000000  00000000  00000207  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ba  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007d  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 37 00 	call	0x6e	; 0x6e <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_us>:
int k;
  for(k=0;k<a;k++)
  {
  //    __asm("nop");;    
  }
}
  6c:	08 95       	ret

0000006e <main>:

 int main(void)
  //
  {

DDRA=0xF0;  
  6e:	80 ef       	ldi	r24, 0xF0	; 240
  70:	8a bb       	out	0x1a, r24	; 26
TCCR1B |=(1<<CS11)|(1<<CS10);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	83 60       	ori	r24, 0x03	; 3
  76:	8e bd       	out	0x2e, r24	; 46
PORTA=0X00; 
  78:	1b ba       	out	0x1b, r1	; 27
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
	    TCNT1=0;
	    PORTA ^=(1<<PINA7);
		i++;
		  if (i>4)
		  {
		  PORTA^=(1<<PIN5);
  7e:	40 e2       	ldi	r20, 0x20	; 32
PORTA=0X00; 
int i =0;

  while(1)
  {
	  if (TCNT1<15625)
  80:	8c b5       	in	r24, 0x2c	; 44
  82:	9d b5       	in	r25, 0x2d	; 45
  84:	89 50       	subi	r24, 0x09	; 9
  86:	9d 43       	sbci	r25, 0x3D	; 61
  88:	10 f4       	brcc	.+4      	; 0x8e <main+0x20>
	  {
	    PORTA |=(1<<PINA6); 
  8a:	de 9a       	sbi	0x1b, 6	; 27
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0x12>
		} 
	  else
	  {
	    TCNT1=0;
  8e:	1d bc       	out	0x2d, r1	; 45
  90:	1c bc       	out	0x2c, r1	; 44
	    PORTA ^=(1<<PINA7);
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 58       	subi	r24, 0x80	; 128
  96:	8b bb       	out	0x1b, r24	; 27
		i++;
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
		  if (i>4)
  9c:	25 30       	cpi	r18, 0x05	; 5
  9e:	31 05       	cpc	r19, r1
  a0:	7c f3       	brlt	.-34     	; 0x80 <main+0x12>
		  {
		  PORTA^=(1<<PIN5);
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	84 27       	eor	r24, r20
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	e9 cf       	rjmp	.-46     	; 0x80 <main+0x12>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
